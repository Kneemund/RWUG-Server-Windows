#pragma once

#define GAMEPAD_BUTTON_A 0x8000
#define GAMEPAD_BUTTON_B 0x4000
#define GAMEPAD_BUTTON_X 0x2000
#define GAMEPAD_BUTTON_Y 0x1000
#define GAMEPAD_BUTTON_LEFT 0x0800
#define GAMEPAD_BUTTON_RIGHT 0x0400
#define GAMEPAD_BUTTON_UP 0x0200
#define GAMEPAD_BUTTON_DOWN 0x0100
#define GAMEPAD_BUTTON_ZL 0x0080
#define GAMEPAD_BUTTON_ZR 0x0040
#define GAMEPAD_BUTTON_L 0x0020
#define GAMEPAD_BUTTON_R 0x0010
#define GAMEPAD_BUTTON_PLUS 0x0008
#define GAMEPAD_BUTTON_MINUS 0x0004
#define GAMEPAD_BUTTON_HOME 0x0002
#define GAMEPAD_BUTTON_SYNC 0x0001
#define GAMEPAD_BUTTON_STICK_R 0x00020000
#define GAMEPAD_BUTTON_STICK_L 0x00040000
#define GAMEPAD_BUTTON_TV 0x00010000

struct gamepad_button {
    int button_code;
    int evdev_button_code;
};

const struct gamepad_button GAMEPAD_BUTTON_DATA[] = {
    { GAMEPAD_BUTTON_A, XUSB_GAMEPAD_B },
    { GAMEPAD_BUTTON_B, XUSB_GAMEPAD_A },
    { GAMEPAD_BUTTON_X, XUSB_GAMEPAD_Y },
    { GAMEPAD_BUTTON_Y, XUSB_GAMEPAD_X },
    { GAMEPAD_BUTTON_LEFT, XUSB_GAMEPAD_DPAD_LEFT },
    { GAMEPAD_BUTTON_RIGHT, XUSB_GAMEPAD_DPAD_RIGHT },
    { GAMEPAD_BUTTON_UP, XUSB_GAMEPAD_DPAD_UP },
    { GAMEPAD_BUTTON_DOWN, XUSB_GAMEPAD_DPAD_DOWN },
    { GAMEPAD_BUTTON_L, XUSB_GAMEPAD_LEFT_SHOULDER },
    { GAMEPAD_BUTTON_R, XUSB_GAMEPAD_RIGHT_SHOULDER },
    { GAMEPAD_BUTTON_PLUS, XUSB_GAMEPAD_START },
    { GAMEPAD_BUTTON_MINUS, XUSB_GAMEPAD_BACK },
    { GAMEPAD_BUTTON_HOME, XUSB_GAMEPAD_GUIDE },
    { GAMEPAD_BUTTON_STICK_R, XUSB_GAMEPAD_RIGHT_THUMB },
    { GAMEPAD_BUTTON_STICK_L, XUSB_GAMEPAD_LEFT_THUMB },
};

const int GAMEPAD_BUTTON_DATA_LENGTH = sizeof(GAMEPAD_BUTTON_DATA) / sizeof(GAMEPAD_BUTTON_DATA[0]);